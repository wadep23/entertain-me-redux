{"version":3,"sources":["assets/images/gamer-pic-1.jpg","assets/images/movie-pic-1.jpg","assets/images/tv-pic-1.jpg","assets/images/friends-1.jpg","pages/Login.js","assets/images/entertain-me-logo.png","utils/auth.js","utils/mutations.js","components/SignUpForm/index.js","components/LoginForm/index.js","components/Modal/index.js","utils/queries.js","components/Navbar/index.js","components/Footer/index.js","components/MovieModal/index.js","components/TvModal/index.js","components/GameModal/index.js","components/FriendsList/index.js","pages/Profile.js","components/Game/index.js","pages/Game.js","components/Movie/index.js","pages/Movie.js","components/TV/index.js","pages/Tv.js","components/FeedPage/index.js","pages/Home.js","pages/NoPage.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["Login","className","Carousel","fade","interval","Item","src","gamerImgOne","alt","Caption","movieImgOne","fluid","tvPicOne","friendsImg","decode","this","retrieveToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","userToken","setItem","window","location","assign","removeItem","LOGIN","gql","SIGNUP","ADD_FRIEND","ADD_POST","SAVE_MOVIE","REMOVE_MOVIE","SAVE_TV_SHOW","REMOVE_TV_SHOW","SAVE_GAME","REMOVE_GAME","SignupForm","useState","username","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","useMutation","createUser","handleInputChange","event","target","name","value","handleFormSubmit","a","preventDefault","currentTarget","checkValidity","stopPropagation","variables","data","Auth","login","addUser","console","error","Form","noValidate","onSubmit","Alert","dismissible","onClose","show","variant","Group","Label","htmlFor","Control","type","placeholder","onChange","required","Feedback","Button","disabled","LoginForm","loginUser","UserModal","props","showModal","setShowModal","Modal","size","onHide","dialogClassName","Tab","Container","defaultActiveKey","id","Header","closeButton","Title","Nav","Link","eventKey","Body","Content","Pane","dialogueClassName","handleModalClose","SignUpForm","MOVIE_API_QUERY","TV_API_QUERY","GAME_API_QUERY","TRAILER_API_QUERY","QUERY_POSTS","QUERY_SELF","QUERY_USER","AppNavbar","useQuery","me","Navbar","collapseOnSelect","expand","bg","loggedIn","Brand","href","as","to","onClick","Toggle","Collapse","NavDropdown","title","Divider","logout","logoImg","Row","Col","class","Footer","color","MovieModal","showMovieTrailerModal","setShowMovieTrailerModal","movieTrailerModalTitle","useLazyQuery","getTrailer","loading","useEffect","document","getElementById","trailer","videoId","log","mediaTitle","TvModal","showTvTrailerModal","setShowTvTrailerModal","tvTrailerModalTitle","GameModal","showGameTrailerModal","setShowGameTrailerModal","gameTrailerModalTitle","FriendList","friendCount","friends","length","map","friend","_id","Profile","userParam","useParams","setMovieTrailerModalTitle","setTvTrailerModalTitle","setGameTrailerModalTitle","addFriend","deleteMovie","deleteShow","deleteGame","userData","user","getUserData","handleDeleteMovie","movieId","handleDeleteShow","showId","tvShowId","handleDeleteGame","gameId","handleClick","favoriteMovies","sm","Card","style","width","Img","moviePoster","movieName","Text","movieDetails","movieRating","favoriteTvShows","tvShowPoster","tvShowName","tvShowDetails","tvShowRating","favoriteGames","gamePoster","gameName","gameRating","SearchGames","platformInt","genreString","searchedMedia","setSearchedMedia","savedMedia","setSavedMedia","genre","platform","saveGame","createPost","gameData","game","rating","background_image","handleSaveMedia","gameToSave","find","media","postText","games","Game","setPlatformInt","setGenreString","handleButtonPlatformClick","dataInt","parseInt","handleButtonGenreClick","auth","j","SearchMovies","imgLink","getGenre","saveMovie","movieData","movie","movies","original_title","poster_path","overview","vote_average","movieToSave","Movie","SearchShows","saveTvShow","tvShowData","tvShow","showToSave","shows","Tv","FeedList","postData","posts","post","fontWeight","createdAt","HomePage","NoPage","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","Home","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.1e6d7937.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gamer-pic-1.048625f7.jpg\";","export default __webpack_public_path__ + \"static/media/movie-pic-1.3e885e32.jpg\";","export default __webpack_public_path__ + \"static/media/tv-pic-1.f4980a2f.jpg\";","export default __webpack_public_path__ + \"static/media/friends-1.d4c84950.jpg\";","import Carousel from \"react-bootstrap/Carousel\";\nimport gamerImgOne from \"../assets/images/gamer-pic-1.jpg\";\nimport movieImgOne from \"../assets/images/movie-pic-1.jpg\";\nimport tvPicOne from \"../assets/images/tv-pic-1.jpg\";\nimport friendsImg from \"../assets/images/friends-1.jpg\";\n\n\n\nfunction Login() {\n\n  return (\n    <div>\n      <main>\n        <br />\n        <h2 className=\"intro-text\">\n         It can be a colossal waste of time trying to figure out what to watch or what game to play when there are too many to choose from. Entertain-Me facilitates the process, and connects users based on mutual interests. Are you not entertained? {\" \"}\n        </h2>\n        <div className=\"carousel-container\">\n          <Carousel fade interval={3000}>\n            <Carousel.Item interval={3000}>\n              <img\n                className=\"d-block w-100\"\n                src={gamerImgOne}\n                alt=\"First slide\"\n              />\n              <Carousel.Caption>\n                <h3>What game would you like to play today? Let us help!</h3>\n              </Carousel.Caption>\n            </Carousel.Item>\n            <Carousel.Item interval={3000}>\n              <img\n                className=\"d-block w-100\"\n                src={movieImgOne}\n                alt=\"Second slide\"\n              />\n\n              <Carousel.Caption>\n                <h3>\n                  Deciding what to watch doesn't have to be\n                  difficult. We are here for you!\n                </h3>\n              </Carousel.Caption>\n            </Carousel.Item>\n            <Carousel.Item interval={3000}>\n              <img\n                fluid\n                className=\"d-block w-100\"\n                src={tvPicOne}\n                alt=\"Third slide\"\n              />\n\n              <Carousel.Caption>\n                <h3>\n                  Binge the shows that everyone is talking about!\n                </h3>\n              </Carousel.Caption>\n            </Carousel.Item>\n            <Carousel.Item interval={3000}>\n              <img\n                fluid\n                className=\"d-block w-100\"\n                src={friendsImg}\n                alt=\"Third slide\"\n              />\n\n              <Carousel.Caption>\n                <h3>\n                  Make friends, discuss your favorite media!\n                </h3>\n              </Carousel.Caption>\n            </Carousel.Item>\n          </Carousel>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Login;","export default __webpack_public_path__ + \"static/media/entertain-me-logo.fd4d6cb7.png\";","import decode from \"jwt-decode\";\n\nclass AuthData {\n  // Grab data saved in token\n  getUserData() {\n    return decode(this.retrieveToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.retrieveToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decodedToken = decode(token);\n      if (decodedToken.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // get token from local storage\n  retrieveToken() {\n    return localStorage.getItem(\"user_token\");\n  }\n\n  // Set token to localStorage\n  login(userToken) {\n    localStorage.setItem(\"user_token\", userToken);\n    window.location.assign(\"/\");\n  }\n\n  // Clears token and logouts\n  logout() {\n    localStorage.removeItem(\"user_token\");\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthData();\n","import { gql } from \"@apollo/client\";\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SIGNUP = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_FRIEND = gql`\n  mutation addFriend($id: ID!) {\n    addFriend(friendId: $id) {\n      _id\n      username\n      friendCount\n      friends {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_POST = gql`\n  mutation addPost($postText: String!) {\n    addPost(postText: $postText) {\n      _id\n      username\n      createdAt\n      postText\n    }\n  }\n`;\n\nexport const SAVE_MOVIE = gql`\n  mutation saveMovie(\n    $movieId: ID!\n    $movieName: String!\n    $moviePoster: String\n    $movieDetails: String!\n    $movieRating: Float\n  ) {\n    saveMovie(\n      movieId: $movieId\n      movieName: $movieName\n      moviePoster: $moviePoster\n      movieDetails: $movieDetails\n      movieRating: $movieRating\n    ) {\n      _id\n      username\n      favoriteMovies {\n        movieId\n        movieName\n        moviePoster\n        movieDetails\n        movieRating\n      }\n    }\n  }\n`;\n\nexport const REMOVE_MOVIE = gql`\n  mutation removeMovie($movieId: ID!) {\n    removeMovie(movieId: $movieId) {\n      _id\n      username\n      favoriteMovies {\n        movieId\n      }\n    }\n  }\n`;\n\nexport const SAVE_TV_SHOW = gql`\n  mutation saveTvShow(\n    $tvShowId: ID!\n    $tvShowName: String!\n    $tvShowPoster: String\n    $tvShowDetails: String!\n    $tvShowRating: Float\n  ) {\n    saveTvShow(\n      tvShowId: $tvShowId\n      tvShowName: $tvShowName\n      tvShowPoster: $tvShowPoster\n      tvShowDetails: $tvShowDetails\n      tvShowRating: $tvShowRating\n    ) {\n      _id\n      username\n      favoriteTvShows {\n        tvShowId\n        tvShowName\n        tvShowPoster\n        tvShowDetails\n        tvShowRating\n      }\n    }\n  }\n`;\n\nexport const REMOVE_TV_SHOW = gql`\n  mutation removeTvShow($tvShowId: ID!) {\n    removeTvShow(tvShowId: $tvShowId) {\n      _id\n      username\n      favoriteTvShows {\n        tvShowId\n      }\n    }\n  }\n`;\n\nexport const SAVE_GAME = gql`\n  mutation saveGame(\n    $gameId: ID!\n    $gameName: String!\n    $gamePoster: String\n    $gameRating: Float\n  ) {\n    saveGame(\n      gameId: $gameId\n      gameName: $gameName\n      gamePoster: $gamePoster\n      gameRating: $gameRating\n    ) {\n      _id\n      username\n      favoriteGames {\n        gameId\n        gameName\n        gamePoster\n        gameRating\n      }\n    }\n  }\n`;\n\nexport const REMOVE_GAME = gql`\n  mutation removeGame($gameId: ID!) {\n    removeGame(gameId: $gameId) {\n      _id\n      username\n      favoriteGames {\n        gameId\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { SIGNUP } from \"../../utils/mutations\";\nimport Auth from \"../../utils/auth\";\n\nconst SignupForm = () => {\n  // set initial form state\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n  // set state for form validation\n  const [validated] = useState(false);\n  // set state for alert\n  const [showAlert, setShowAlert] = useState(false);\n  // define mutation for adding a user\n  const [createUser] = useMutation(SIGNUP);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    // check if form has everything (as per react-bootstrap docs)\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await createUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"dark\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","import React, { useState } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport Auth from \"../../utils/auth\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN } from \"../../utils/mutations\";\n\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n  const [loginUser] = useMutation(LOGIN);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    \n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await loginUser({\n        variables: { ...userFormData },\n      });\n\n      Auth.login(data.login.token);\n    } catch (err) {\n      console.error(err);\n      setShowAlert(true);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n        >\n          Something went wrong with your login credentials!\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"dark\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import { Nav, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"../SignUpForm\";\nimport LoginForm from \"../LoginForm\";\n\nconst UserModal = (props) => {\n  const { showModal, setShowModal } = props;\n\n  return (\n    <>\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n        dialogClassName={\"primaryModal\"}\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\" id=\"modalContainer\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane dialogueClassName={\"logButton\"} eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default UserModal;\n","import { gql } from \"@apollo/client\";\n\nexport const MOVIE_API_QUERY = gql`\n  query movie($genre: Int!) {\n    movie(genre: $genre) {\n      id\n      original_title\n      overview\n      poster_path\n      vote_average\n    }\n  }\n`;\n\nexport const TV_API_QUERY = gql`\n  query tvShow($genre: Int!) {\n    tvShow(genre: $genre) {\n      id\n      name\n      overview\n      poster_path\n      vote_average\n    }\n  }\n`;\n\nexport const GAME_API_QUERY = gql`\n  query game($genre: String!, $platform: Int!) {\n    game(genre: $genre, platform: $platform) {\n      id\n      name\n      rating\n      background_image\n    }\n  }\n`;\n\nexport const TRAILER_API_QUERY = gql`\n  query trailer($mediaTitle: String!) {\n    trailer(mediaTitle: $mediaTitle) {\n      videoId\n      title\n    }\n  }\n`;\n\nexport const QUERY_POSTS = gql`\n  query {\n    posts {\n      _id\n      createdAt\n      username\n      postText\n    }\n  }\n`;\n\nexport const QUERY_SELF = gql`\n  {\n    me {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      favoriteMovies {\n        movieId\n        movieName\n        moviePoster\n        movieDetails\n        movieRating\n      }\n      favoriteTvShows {\n        tvShowId\n        tvShowName\n        tvShowPoster\n        tvShowDetails\n        tvShowRating\n      }\n      favoriteGames {\n        gameId\n        gameName\n        gamePoster\n        gameRating\n      }\n      createdPosts {\n        username\n        createdAt\n        postText\n      }\n    }\n  }\n`;\n\nexport const QUERY_ME_SIDEWAYS = gql`\n  {\n    me {\n      _id\n      username\n    }\n  }\n`;\n\nexport const QUERY_USER = gql`\n  query user($username: String!) {\n    user(username: $username) {\n      _id\n      username\n      email\n      friendCount\n      friends {\n        _id\n        username\n      }\n      favoriteMovies {\n        movieId\n        movieName\n        moviePoster\n        movieDetails\n        movieRating\n      }\n      favoriteTvShows {\n        tvShowId\n        tvShowName\n        tvShowPoster\n        tvShowDetails\n        tvShowRating\n      }\n      favoriteGames {\n        gameId\n        gameName\n        gamePoster\n        gameRating\n      }\n      createdPosts {\n        username\n        createdAt\n        postText\n      }\n    }\n  }\n`;\n","import React, { useState } from \"react\";\nimport { Navbar, Nav, NavDropdown, Container, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport logoImg from \"../../assets/images/entertain-me-logo.png\";\nimport { GiLaurels } from 'react-icons/gi'\n// import LoginForm from \"../LoginForm\";\n// import SignUpForm from \"../SignUpForm\";\n\nimport Auth from \"../../utils/auth\";\nimport UserModal from \"../Modal\";\nimport { QUERY_SELF } from \"../../utils/queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst AppNavbar = () => {\n  const [showModal, setShowModal] = useState(false);\n  const { data } = useQuery(QUERY_SELF);\n  let username;\n\n  if (data) {\n    username = data.me.username;\n  }\n\n  return (\n    <div fluid>\n      <Navbar\n        collapseOnSelect\n        expand=\"lg\"\n        bg=\"dark\"\n        variant=\"dark\"\n        className=\"fixed-top\"\n      >\n        <Container>\n          {/* if user is logged in, no sign-in modal */}\n          {Auth.loggedIn() ? (\n            <Navbar.Brand href=\"#home\" as={Link} to={\"/\"}>\n              Entertain Me!\n            </Navbar.Brand>\n          ) : (\n            <Navbar.Brand\n              href=\"#home\"\n              as={Link}\n              to={\"/\"}\n              onClick={() => setShowModal(true)}\n            >\n              Entertain Me!\n            </Navbar.Brand>\n          )}\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"me-auto\">\n              <NavDropdown title=\"The Arena\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item href=\"#movies\" as={Link} to=\"/movie\">\n                  Movies\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#television\" as={Link} to=\"/tv\">\n                  TV\n                </NavDropdown.Item>\n                <NavDropdown.Item href=\"#videogames\" as={Link} to=\"/game\">\n                  Video Games\n                </NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#feed\" as={Link} to=\"/home\">Feed</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n            <Nav>\n              {/* if user is logged in show saved media and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to={`/profile/${username}?`}>\n                    See Your Media\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <UserModal showModal={showModal} setShowModal={setShowModal} />\n      <header>\n        <img id=\"logo\" src={logoImg} alt=\"logo\"></img>\n        <Row>\n          <Col>\n          \n        <GiLaurels class=\"laurels\"/>        \n          </Col>\n          <Col>\n          \n        <h5>WHEN INDECISION STANDS IN THE WAY OF ENTERTAINMENT </h5>\n          </Col>\n          <Col>\n          \n        <GiLaurels class=\"laurels\"/>\n          </Col>\n        </Row>\n      </header>\n    </div>\n  );\n};\n\nexport default AppNavbar;\n","\nimport React from \"react\";\nimport { FaGithub } from \"react-icons/fa\";\n//\n\n\nconst Footer = () => (\n  <div className=\"footer\">\n    <p>\n      <h6>Developed by QUERY_ME_SIDEWAYS&#169;</h6>\n      <li><a href=\"https://github.com/wadep23/entertain-me-redux\"><FaGithub color='goldenrod' size={50} /></a></li>\n    </p>\n  </div>\n);\n\nexport default Footer;","import { useEffect } from \"react\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { useLazyQuery } from \"@apollo/client\";\nimport { TRAILER_API_QUERY } from \"../../utils/queries\";\n\nconst MovieModal = (props) => {\n    const { showMovieTrailerModal, setShowMovieTrailerModal, movieTrailerModalTitle } = props;\n    const [getTrailer, { loading, data }] = useLazyQuery(TRAILER_API_QUERY);\n    \n    useEffect(() => {\n        if (data) {\n            document.getElementById('video').src = `https://www.youtube.com/embed/${data.trailer.videoId}`\n        }\n    });\n\n    if (loading) {\n      return <div>Loading...</div>\n    }\n  \n    console.log(data);\n\n    return (\n      <>\n        <Modal\n          size=\"lg\"\n          show={showMovieTrailerModal}\n          onHide={() => setShowMovieTrailerModal(false)}\n          aria-labelledby=\"trailer-modal\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{movieTrailerModalTitle}</Modal.Title>       \n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"video-box\">\n              <iframe title=\"youtube\" dialogueClassName=\"video\" \n              id=\"video\" className=\"video\"></iframe>   \n            </div>   \n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => getTrailer({ variables: { mediaTitle: movieTrailerModalTitle }})}>Show Me The Trailer!</Button>     \n          </Modal.Footer>         \n          </Modal>\n      </>                           \n    )                               \n};\n\nexport default MovieModal;","import { useEffect } from \"react\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { useLazyQuery } from \"@apollo/client\";\nimport { TRAILER_API_QUERY } from \"../../utils/queries\";\n\nconst TvModal = (props) => {\n    const { showTvTrailerModal, setShowTvTrailerModal, tvTrailerModalTitle } = props;\n    const [getTrailer, { loading, data }] = useLazyQuery(TRAILER_API_QUERY);\n    \n    useEffect(() => {\n        if (data) {\n            document.getElementById('video').src = `https://www.youtube.com/embed/${data.trailer.videoId}`\n        }\n    });\n\n    if (loading) {\n      return <div>Loading...</div>\n    }\n  \n    return (\n      <>\n        <Modal\n          size=\"lg\"\n          show={showTvTrailerModal}\n          onHide={() => setShowTvTrailerModal(false)}\n          aria-labelledby=\"trailer-modal\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{tvTrailerModalTitle}</Modal.Title>       \n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"video-box\">\n              <iframe title=\"youtube\" dialogueClassName=\"video\" \n              id=\"video\" className=\"video\"></iframe>   \n            </div>   \n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => getTrailer({ variables: { mediaTitle: tvTrailerModalTitle }})}>Show Me The Trailer!</Button>     \n          </Modal.Footer>         \n          </Modal>\n      </>                           \n    )                               \n};\n\nexport default TvModal;","import { useEffect } from \"react\";\nimport { Modal, Button } from 'react-bootstrap';\nimport { useLazyQuery } from \"@apollo/client\";\nimport { TRAILER_API_QUERY } from \"../../utils/queries\";\n\nconst GameModal = (props) => {\n    const { showGameTrailerModal, setShowGameTrailerModal, gameTrailerModalTitle } = props;\n    const [getTrailer, { loading, data }] = useLazyQuery(TRAILER_API_QUERY);\n    \n    useEffect(() => {\n        if (data) {\n            document.getElementById('video').src = `https://www.youtube.com/embed/${data.trailer.videoId}`\n        }\n    });\n\n    if (loading) {\n      return <div>Loading...</div>\n    }\n  \n    return (\n      <>\n        <Modal\n          size=\"lg\"\n          show={showGameTrailerModal}\n          onHide={() => setShowGameTrailerModal(false)}\n          aria-labelledby=\"trailer-modal\"\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>{gameTrailerModalTitle}</Modal.Title>       \n          </Modal.Header>\n          <Modal.Body>\n            <div className=\"video-box\">\n              <iframe title=\"youtube\" dialogueClassName=\"video\" \n              id=\"video\" className=\"video\"></iframe>   \n            </div>   \n          </Modal.Body>\n          <Modal.Footer>\n            <Button onClick={() => getTrailer({ variables: { mediaTitle: gameTrailerModalTitle }})}>Show Me The Trailer!</Button>     \n          </Modal.Footer>         \n          </Modal>\n      </>                           \n    )                               \n};\n\nexport default GameModal;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst FriendList = ({ friendCount, username, friends }) => {\n  if (!friends || !friends.length) {\n    return <p className=\"bg-dark text-light p-3\">{username}, make some friends!</p>;\n  }\n\n  return (\n    <div>\n      <h5>\n        {username}'s {friendCount} {friendCount === 1 ? 'friend' : 'friends'}\n      </h5>\n      {friends.map(friend => (\n        <button className=\"btn w-100 display-block mb-2\" id=\"friend-btn\" key={friend._id}>\n          <Link className=\"name-friend-link\" id=\"btnLink\" to={`/profile/${friend.username}`}>{friend.username}</Link>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default FriendList;","import React, { useState } from 'react';\nimport { Redirect, useParams } from \"react-router-dom\";\nimport {\n  ADD_FRIEND,\n  REMOVE_MOVIE,\n  REMOVE_TV_SHOW,\n  REMOVE_GAME,\n} from \"../utils/mutations\";\nimport { QUERY_SELF, QUERY_USER } from \"../utils/queries\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {\n  Container,\n  Card,\n  Button,\n  Row,\n  Col,\n} from \"react-bootstrap\";\nimport MovieModal from '../components/MovieModal';\nimport TvModal from '../components/TvModal';\nimport GameModal from '../components/GameModal';\nimport FriendList from \"../components/FriendsList\";\nimport Auth from \"../utils/auth\";\n\nconst Profile = () => {\n  const { username: userParam } = useParams();\n\n  const [showMovieTrailerModal, setShowMovieTrailerModal] = useState(false);\n  const [movieTrailerModalTitle, setMovieTrailerModalTitle] = useState('');\n  const [showTvTrailerModal, setShowTvTrailerModal] = useState(false);\n  const [tvTrailerModalTitle, setTvTrailerModalTitle] = useState('');\n  const [showGameTrailerModal, setShowGameTrailerModal] = useState(false);\n  const [gameTrailerModalTitle, setGameTrailerModalTitle] = useState('');\n\n  const [addFriend] = useMutation(ADD_FRIEND);\n  const [deleteMovie] = useMutation(REMOVE_MOVIE);\n  const [deleteShow] = useMutation(REMOVE_TV_SHOW);\n  const [deleteGame] = useMutation(REMOVE_GAME);\n\n  const { loading, data } = useQuery(userParam ? QUERY_USER : QUERY_SELF , {\n    variables: { username: userParam },\n  });\n\n  const userData = data?.me || data?.user || {};\n\n  if (Auth.loggedIn() && Auth.getUserData().data.username === userParam) {\n    return <Redirect to=\"/profile\" />;\n  }\n\n  if (!Auth.loggedIn()) {\n    return <Redirect to=\"/\" />;\n  }\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Please select log in or sign up to\n        view user profile page!\n      </h4>\n    );\n  }\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  // change the passed in value to something that can be unique to the content type ie. passed in value of mediaType and compare to favorite media array on user model\n  const handleDeleteMovie = async (movieId) => {\n    const token = Auth.loggedIn() ? Auth.retrieveToken() : null;\n    \n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteMovie({\n        variables: { movieId: movieId }\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  };\n  \n  const handleDeleteShow = async (showId) => {\n    const token = Auth.loggedIn() ? Auth.retrieveToken() : null;\n    \n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteShow({\n        variables: { tvShowId: showId }\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  };\n\n  const handleDeleteGame = async (gameId) => {\n    const token = Auth.loggedIn() ? Auth.retrieveToken() : null;\n    \n    if (!token) {\n      return false;\n    }\n\n    try {\n      await deleteGame({\n        variables: { gameId: gameId }\n      })\n    } catch (err) {\n      console.error(err)\n    }\n  };\n\n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: { id: userData._id },\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <main>\n      <div>\n        <div className=\"flex-row mb-3\">\n          <h2 className=\"bg-dark text-secondary p-3 display-inline-block text-center\">\n            Welcome to {userParam ? `${userData.username}'s` : 'your'} Profile!\n          </h2>\n        </div>\n        <div className=\"btn-loc\">\n          {userParam && (\n            <button onClick={handleClick} size=\"lg\">\n              Add Friend\n            </button>\n          )}\n        </div>\n        <div className=\"col-12 col-lg-3 mb-3\">\n          <FriendList \n            username={userData.username}\n            friendCount={userData.friendCount}\n            friends={userData.friends}\n          />\n        </div>\n      <Container>\n        <h2>\n          {userData.favoriteMovies.length\n            ? `Viewing ${userData.favoriteMovies.length} saved ${\n              userData.favoriteMovies.length === 1 ? \"Movie\" : \"Movies\"\n              }:`\n              : \"You have no saved Movies!\"}\n        </h2>\n        <Row fluid=\"true\">\n          {userData.favoriteMovies.map((user) => {\n            return (\n              <Col sm={3}>\n                <Card key={user.movieId} style={{ width: '18rem' }}>\n                  <Card.Img src={user.moviePoster} alt={`The poster for ${user.movieName}`} variant=\"top\" />\n                  <Card.Body className=\"card-body\">\n                      <Card.Title>{user.movieName}</Card.Title>\n                      <Card.Text>{user.movieDetails}</Card.Text>\n                      <Card.Text>Rating: {user.movieRating}</Card.Text>\n                      {Auth.loggedIn() && (\n                        <Button className=\"btn-block btn-danger\"\n                        onClick={() => handleDeleteMovie(user.movieId)}\n                        >Delete this Movie!\n                        </Button>\n                      )}\n                        <Button variant=\"primary\" \n                          onClick={() => {setShowMovieTrailerModal(true)\n                            setMovieTrailerModalTitle(user.movieName + \" Movie Trailer\"); }}\n                          >Watch a trailer!\n                        </Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n      <MovieModal\n        showMovieTrailerModal={showMovieTrailerModal}\n        setShowMovieTrailerModal={setShowMovieTrailerModal}\n        movieTrailerModalTitle={movieTrailerModalTitle}\n        setMovieTrailerModalTitle={setMovieTrailerModalTitle}\n        ></MovieModal>  \n      <Container>\n        <h2>\n          {userData.favoriteTvShows.length\n            ? `Viewing ${userData.favoriteTvShows.length} saved ${\n              userData.favoriteTvShows.length === 1 ? \"T.V. show\" : \"T.V. shows\"\n              }:`\n            : \"You have no saved T.V. Shows!\"}\n        </h2>\n        <Row fluid=\"true\">\n          {userData.favoriteTvShows.map((user) => {\n            return (\n              <Col sm={3}>\n                <Card key={user.tvShowId} style={{ width: '18rem' }}>\n                  <Card.Img src={user.tvShowPoster} alt={`The poster for ${user.tvShowName}`} variant=\"top\" />\n                  <Card.Body className=\"card-body\">\n                    <Card.Title>{user.tvShowName}</Card.Title>\n                    <Card.Text>{user.tvShowDetails}</Card.Text>\n                    <Card.Text>Rating: {user.tvShowRating}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button className=\"btn-block btn-danger\"\n                      onClick={() => handleDeleteShow(user.tvShowId)}\n                      >\n                        Delete this T.V. Show!\n                      </Button>\n                    )}\n                    <Button variant=\"primary\" onClick={() => {setShowTvTrailerModal(true)\n                    setTvTrailerModalTitle(user.tvShowName + \" Show Trailer\"); }}\n                    >Watch a trailer!</Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n      <TvModal\n        showTvTrailerModal={showTvTrailerModal}\n        setShowTvTrailerModal={setShowTvTrailerModal}\n        tvTrailerModalTitle={tvTrailerModalTitle}\n        setTvTrailerModalTitle={setTvTrailerModalTitle}\n        ></TvModal>\n      <Container>\n        <h2>\n          {userData.favoriteGames.length\n            ? `Viewing ${userData.favoriteGames.length} saved ${\n              userData.favoriteGames.length === 1 ? \"game\" : \"games\"\n            }:`\n            : \"You have no saved Games!\"}\n        </h2>\n        <Row fluid=\"true\">\n          {userData.favoriteGames.map((user) => {\n            return (\n              <Col sm={3}>\n                <Card key={user.gameId} style={{ width: '18rem' }}>\n                  <Card.Img src={user.gamePoster} alt={`The poster for ${user.gameName}`} variant=\"top\" />\n                  <Card.Body className=\"card-body\">\n                  <Card.Title>{user.gameName}</Card.Title>\n                    <Card.Text>Rating: {user.gameRating}</Card.Text>\n                    {Auth.loggedIn() && (\n                      <Button className=\"btn-block btn-danger\"\n                      onClick={() => handleDeleteGame(user.gameId)}\n                      >\n                      Delete this Game!\n                    </Button>\n                    )}\n                    <Button variant=\"primary\" \n                    onClick={() => {setShowGameTrailerModal(true)\n                    setGameTrailerModalTitle(user.gameName + \" game Trailer\"); }}\n                    >\n                      Watch a trailer!\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </Col>   \n            );\n          })}\n        </Row>\n      </Container>\n      <GameModal\n        showGameTrailerModal={showGameTrailerModal}\n        setShowGameTrailerModal={setShowGameTrailerModal}\n        gameTrailerModalTitle={gameTrailerModalTitle}\n        setGameTrailerModalTitle={setGameTrailerModalTitle}\n      ></GameModal> \n      </div>\n    </main>\n  );\n};\n\nexport default Profile;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Card, Row, Container, Col } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SAVE_GAME, ADD_POST } from '../../utils/mutations';\nimport { GAME_API_QUERY }from '../../utils/queries';\nimport GameModal from '../GameModal';\nimport Auth from '../../utils/auth';\n\nconst SearchGames = (props) => {\n    const { platformInt, genreString } = props;\n    const [showGameTrailerModal, setShowGameTrailerModal] = useState(false);\n    const [gameTrailerModalTitle, setGameTrailerModalTitle] = useState('');\n    const [searchedMedia, setSearchedMedia] = useState([]);\n    const [savedMedia, setSavedMedia] = useState({});\n\n    const { loading, data } = useQuery(GAME_API_QUERY, {\n        variables: { genre: genreString, platform: platformInt}\n    });\n    \n    const [saveGame] = useMutation(SAVE_GAME);\n    const [createPost] = useMutation(ADD_POST);\n\n    \n    useEffect(() => {\n        if (data) {\n            let gameData = data.game.map((game) => ({\n                gameId: game.id,\n                gameName: game.name,\n                gameRating: game.rating,\n                gamePoster: game.background_image\n            }));\n            setSearchedMedia(gameData) \n        }\n    }, [data]);\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n    const handleSaveMedia = async (gameId) => {\n        const gameToSave = searchedMedia.find((media) => media.gameId === gameId);\n        \n        \n        try {\n            await saveGame({\n                variables: {\n                    gameId: gameToSave.gameId,\n                    gameName: gameToSave.gameName,\n                    gamePoster: gameToSave.gamePoster,\n                    gameRating: gameToSave.gameRating\n                }\n            })\n\n            await createPost({\n                variables: {\n                  postText: ` saved ${gameToSave.gameName} to their favorite games!`  \n                }\n            })\n\n            setSavedMedia([...savedMedia, gameToSave.gameId])\n            } catch (err) {\n                console.error(err);\n            }\n    };\n\n    return (\n        <div class=\"return-data\">\n            <Container>\n                <Row>\n                    {searchedMedia.map((games) => {\n                        return (\n                            <Col sm={3}>\n                                <Card key={games.gameId} style={{ width: '18rem' }}>\n                                    <Card.Img src={games.gamePoster} alt={`The poster for ${games.gameName}`} variant=\"top\" />\n                                    <Card.Body className=\"card-body\">\n                                        <Card.Title>{games.gameName}</Card.Title>\n                                        <Card.Text>Rating: {games.gameRating}</Card.Text>\n                                        {Auth.loggedIn() && (\n                                            <Button variant=\"primary\" onClick={() => {handleSaveMedia(games.gameId); }}>Save to your favorites!</Button>\n                                        )}\n                                        <Button variant=\"primary\" onClick={() => {setShowGameTrailerModal(true)\n                                         setGameTrailerModalTitle(games.gameName + \" game Trailer\"); }}\n                                        >Watch a trailer!</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>   \n                        )   \n                    })}  \n                </Row>\n            </Container>\n            <GameModal\n                showGameTrailerModal={showGameTrailerModal}\n                setShowGameTrailerModal={setShowGameTrailerModal}\n                gameTrailerModalTitle={gameTrailerModalTitle}\n                setGameTrailerModalTitle={setGameTrailerModalTitle}\n            ></GameModal>    \n        </div>\n    );\n};\n\nexport default SearchGames;","import React, { useState } from 'react';\nimport { Row, Container, Col } from 'react-bootstrap';\nimport { FaDiceD20, FaCrosshairs, FaPuzzlePiece, FaChessBoard, FaHeadset, FaPlaystation, FaXbox, FaMouse } from \"react-icons/fa\";\nimport { SiNintendoswitch } from \"react-icons/si\";\nimport { GiPunchBlast, GiAudioCassette, GiAxeSword, GiChessRook, GiBrain, GiCard2Hearts, GiFamilyHouse, GiVrHeadset, GiSteeringWheel, GiHighKick, GiFloatingPlatforms } from \"react-icons/gi\";\nimport { BiCool, BiGame } from \"react-icons/bi\";\nimport { IoAmericanFootballSharp } from \"react-icons/io5\"; \nimport { Redirect } from 'react-router';\nimport auth from '../utils/auth';\nimport { IoGameController } from \"react-icons/io5\";\nimport SearchGames from '../components/Game'\n\nconst Game = () => {\n  const [platformInt, setPlatformInt] = useState('');\n  const [genreString, setGenreString] = useState('');\n\n  const handleButtonPlatformClick = (platformInt) => {\n    const dataInt = parseInt(platformInt)\n\n    setPlatformInt(dataInt)\n  }\n\n  const handleButtonGenreClick = (genreString) => {\n    setGenreString(genreString)\n  }\n\n  if (!auth.loggedIn()) {\n    return <Redirect to =\"/\" />\n  }\n  \n  return (\n    <main>\n      <div>\n        <div className=\"flex-row mb-3\">\n          <h2 className=\"bg-dark text-secondary p-3 display-inline-block text-center\">\n            <IoGameController /> Select Platform & Game genre:\n          </h2>\n          <Container>\n                <Row fluid>\n                    <Col>\n                        <button value=\"2\" onClick={(j) => handleButtonPlatformClick(j.target.value)} \n                        ><FaPlaystation />  Playstation</button>\n                    </Col>\n                    <Col>\n                        <button value=\"3\" onClick={(j) => handleButtonPlatformClick(j.target.value)}\n                        ><FaXbox />  XBOX </button>\n                    </Col>\n                    <Col>\n                        <button value=\"1\" onClick={(j) => handleButtonPlatformClick(j.target.value)}\n                        ><FaMouse />  PC</button>\n                    </Col>\n                    <Col>\n                        <button value=\"7\" onClick={(j) => handleButtonPlatformClick(j.target.value)}\n                        ><SiNintendoswitch />  Nintendo</button>\n                    </Col>\n                </Row>\n                {platformInt && (\n                  <Row fluid>\n                  <Col>\n                      <button onClick={(j) => handleButtonGenreClick(j.target.value)}\n                      ><GiPunchBlast /> Action</button>\n                  </Col>\n                  <Col>\n                      <button value=\"indie\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                      ><GiAudioCassette/> Indie</button>\n                  </Col>\n                  <Col>\n                      <button value=\"adventure\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiAxeSword /> Adventure</button>\n                  </Col>\n                  <Col>\n                      <button value=\"role-playing-games-rpg\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><FaDiceD20 /> RPG</button>\n                  </Col>\n                  <Col>\n                      <button value=\"strategy\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiChessRook /> Strategy</button>\n                  </Col>\n                  <Col>\n                      <button value=\"shooter\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><FaCrosshairs /> FPS/Shooter</button>\n                  </Col>\n                  <Col>\n                      <button value=\"casual\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><BiCool /> Casual</button>\n                  </Col>\n                  <Col>\n                      <button value=\"simulation\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiVrHeadset /> Simulation</button>\n                  </Col>\n                  <Col>\n                      <button value=\"puzzle\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><FaPuzzlePiece /> Puzzle</button>\n                  </Col>\n                  <Col>\n                      <button value=\"arcade\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><BiGame/> Arcade</button>\n                  </Col>\n                  <Col>\n                      <button value=\"platformer\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiFloatingPlatforms /> Platformer</button>\n                  </Col>\n                  <Col>\n                      <button value=\"racing\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiSteeringWheel /> Racing</button>\n                  </Col>\n                  <Col>\n                      <button value=\"massively-multiplayer\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><FaHeadset /> MMO</button>\n                  </Col>\n                  <Col>\n                      <button value=\"sports\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><IoAmericanFootballSharp /> Sports</button>\n                  </Col>\n                  <Col>\n                      <button value=\"fighting\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiHighKick /> Fighting</button>\n                  </Col>\n                  <Col>\n                      <button value=\"family\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiFamilyHouse /> Family</button>\n                  </Col>\n                  <Col>\n                      <button value=\"board-games\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><FaChessBoard/> Board Games</button>\n                  </Col>\n                  <Col>\n                      <button value=\"educational\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiBrain /> Education</button>\n                  </Col>\n                  <Col>\n                      <button value=\"card\" onClick={(j) => handleButtonGenreClick(j.target.value)}\n                       ><GiCard2Hearts /> Card</button>\n                  </Col>\n              </Row>\n                )}\n            </Container>\n          <SearchGames\n            platformInt={platformInt}\n            genreString={genreString}\n          >\n          </SearchGames>\n        </div>\n      </div>\n    </main>\n  )};\n\nexport default Game;","import React, { useState, useEffect } from 'react';\nimport {Button, Card, Row, Container, Col} from 'react-bootstrap';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { SAVE_MOVIE, ADD_POST } from '../../utils/mutations';\nimport { MOVIE_API_QUERY }from '../../utils/queries';\nimport MovieModal from '../MovieModal';\nimport Auth from '../../utils/auth';\nimport { FaLaughSquint, FaHeart, FaSadCry, FaHatCowboy, FaMusic } from \"react-icons/fa\";\nimport { GiPistolGun, GiEarthAmerica, GiGhost, GiUnicorn, GiMagnifyingGlass, GiTvRemote, GiSpartanHelmet, GiHandcuffs, GiFamilyHouse, GiAncientColumns  } from \"react-icons/gi\";\nimport { RiAliensFill, RiKnifeBloodLine } from \"react-icons/ri\";\nimport { BiCameraMovie } from \"react-icons/bi\";\n\nconst SearchMovies = () => {\n    let imgLink = \"https://image.tmdb.org/t/p/w500\";\n    const [showMovieTrailerModal, setShowMovieTrailerModal] = useState(false);\n    const [movieTrailerModalTitle, setMovieTrailerModalTitle] = useState('');\n    const [searchedMedia, setSearchedMedia] = useState([]);\n    const [savedMedia, setSavedMedia] = useState({});\n\n    const [getGenre, { loading, data }] = useLazyQuery(MOVIE_API_QUERY);\n    \n    const [saveMovie] = useMutation(SAVE_MOVIE);\n    const [createPost] = useMutation(ADD_POST);\n    \n    useEffect(() => {\n        if (data) {\n            let movieData = data.movie.map((movies) => ({\n                movieId: movies.id,\n                movieName: movies.original_title,\n                moviePoster: imgLink + movies.poster_path,\n                movieDetails: movies.overview,\n                movieRating: movies.vote_average\n            }));\n            setSearchedMedia(movieData) \n        }\n    }, [data, imgLink]);\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n    const handleSaveMedia = async (movieId) => {\n        const movieToSave = searchedMedia.find((media) => media.movieId === movieId);\n        \n        try {\n            await saveMovie({\n                variables: {\n                    movieId: movieToSave.movieId,\n                    movieName: movieToSave.movieName,\n                    moviePoster: movieToSave.moviePoster,\n                    movieDetails: movieToSave.movieDetails,\n                    movieRating: movieToSave.movieRating\n                }\n            })\n\n            await createPost({\n                variables: {\n                  postText: ` saved ${movieToSave.movieName} to their favorite movies!`  \n                }\n            })\n\n            setSavedMedia([...savedMedia, movieToSave.movieId])\n            } catch (err) {\n                console.error(err);\n            }\n    };\n\n    return (\n        <div className=\"return-data\">\n            <Container>\n                <Row fluid=\"true\">\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 28 }})}} \n                        ><GiPistolGun /> Action</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 12 }})}}\n                        ><GiEarthAmerica /> Adventure</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 35 }})}}\n                         ><FaLaughSquint /> Comedy</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 80 }})}}\n                         ><GiHandcuffs  /> Crime</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 99 }})}}\n                         ><BiCameraMovie  /> Documentary</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 18 }})}}\n                        ><FaSadCry /> Drama</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10751 }})}}\n                        ><GiFamilyHouse /> Family</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 14 }})}}\n                        ><GiUnicorn /> Fantasy</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 36 }})}}\n                        ><GiAncientColumns /> History</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 27 }})}}\n                        ><GiGhost /> Horror</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10402 }})}}\n                        ><FaMusic /> Music</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 9648 }})}}\n                        ><GiMagnifyingGlass /> Mystery</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10749 }})}}\n                        ><FaHeart /> Romance</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 878 }})}}\n                        ><RiAliensFill /> Sci-Fi</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10770 }})}}\n                        ><GiTvRemote /> TV Movie</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 53 }})}}\n                        ><RiKnifeBloodLine /> Thriller</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10752 }})}}\n                        ><GiSpartanHelmet /> War</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 37 }})}}\n                        ><FaHatCowboy /> Western</button>\n                    </Col>\n                </Row>\n                <Row>\n                    {searchedMedia.map((movies) => {\n                        return (\n                            <Col sm={3}>\n                                <Card key={movies.movieId} style={{ width: '18rem' }}>\n                                    <Card.Img src={movies.moviePoster} alt={`The poster for ${movies.movieName}`} variant=\"top\" />\n                                    <Card.Body className=\"card-body\">\n                                        <Card.Title>{movies.movieName}</Card.Title>\n                                        <Card.Text>{movies.movieDetails}</Card.Text>\n                                        <Card.Text>Rating: {movies.movieRating}</Card.Text>\n                                        {Auth.loggedIn() && (\n                                            <Button variant=\"primary\" onClick={() => {handleSaveMedia(movies.movieId); }}>Save to your favorites!</Button>\n                                        )}\n                                        <Button variant=\"primary\" onClick={() => {setShowMovieTrailerModal(true)\n                                         setMovieTrailerModalTitle(movies.movieName + \" Movie Trailer\"); }}\n                                        >Watch a trailer!</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>   \n                        )   \n                    })}  \n                </Row>\n            </Container>\n            <MovieModal\n                showMovieTrailerModal={showMovieTrailerModal}\n                setShowMovieTrailerModal={setShowMovieTrailerModal}\n                movieTrailerModalTitle={movieTrailerModalTitle}\n                setMovieTrailerModalTitle={setMovieTrailerModalTitle}\n            ></MovieModal>    \n        </div>\n    );\n};\n\nexport default SearchMovies;","import React from \"react\";\nimport { Redirect } from \"react-router\";\nimport auth from \"../utils/auth\";\nimport SearchMovies from \"../components/Movie\";\nimport { GiFilmProjector } from \"react-icons/gi\";\n\nconst Movie = () => {\n  if (!auth.loggedIn()) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <main>\n      <div>\n        <div className=\"flex-row mb-3\">\n          <h2 className=\"bg-dark text-secondary p-3 display-inline-block text-center\">\n            <GiFilmProjector /> Select a Movie genre:\n          </h2>\n          <SearchMovies />\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Movie;\n","import React, { useState, useEffect } from 'react';\nimport { Button, Card, Row, Container, Col } from 'react-bootstrap';\nimport { useMutation, useLazyQuery } from '@apollo/client';\nimport { SAVE_TV_SHOW, ADD_POST } from '../../utils/mutations';\nimport { TV_API_QUERY }from '../../utils/queries';\nimport TvModal from '../TvModal';\nimport Auth from '../../utils/auth';\nimport { GiHandcuffs,  GiSoap, GiSwordwoman, GiMagnifyingGlass } from \"react-icons/gi\";\nimport { FaLaughSquint, FaSadCry, FaHatCowboy } from \"react-icons/fa\";\nimport { BiCameraMovie } from \"react-icons/bi\";\nimport { BsFillPeopleFill, BsPencil} from \"react-icons/bs\";\nimport { RiKakaoTalkLine } from \"react-icons/ri\";\nimport { GoLaw } from \"react-icons/go\";\n\nconst SearchShows = () => {\n    let imgLink = \"https://image.tmdb.org/t/p/w500\";\n    const [showTvTrailerModal, setShowTvTrailerModal] = useState(false);\n    const [tvTrailerModalTitle, setTvTrailerModalTitle] = useState('');\n    const [searchedMedia, setSearchedMedia] = useState([]);\n    const [savedMedia, setSavedMedia] = useState({});\n\n    const [getGenre, { loading, data }] = useLazyQuery(TV_API_QUERY);\n    \n    const [saveTvShow] = useMutation(SAVE_TV_SHOW);\n    const [createPost] = useMutation(ADD_POST);\n    \n    useEffect(() => {\n        if (data) {\n            let tvShowData = data.tvShow.map((tvShow) => ({\n                tvShowId: tvShow.id,\n                tvShowName: tvShow.name,\n                tvShowPoster: imgLink + tvShow.poster_path,\n                tvShowDetails: tvShow.overview,\n                tvShowRating: tvShow.vote_average\n            }));\n            setSearchedMedia(tvShowData) \n        }\n    }, [data, imgLink]);\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n    const handleSaveMedia = async (tvShowId) => {\n        const showToSave = searchedMedia.find((media) => media.tvShowId === tvShowId);\n        \n        try {\n            await saveTvShow({\n                variables: {\n                    tvShowId: showToSave.tvShowId,\n                    tvShowName: showToSave.tvShowName,\n                    tvShowPoster: showToSave.tvShowPoster,\n                    tvShowDetails: showToSave.tvShowDetails,\n                    tvShowRating: showToSave.tvShowRating\n                }\n            })\n\n            await createPost({\n                variables: {\n                  postText: ` saved ${showToSave.tvShowName} to their favorite shows!`  \n                }\n            })\n\n            setSavedMedia([...savedMedia, showToSave.tvShowId])\n            } catch (err) {\n                console.error(err);\n            }\n    };\n\n    return (\n        <div className=\"return-data\">\n            <Container>\n                <Row fluid=\"true\">\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10759 }})}}\n                         ><GiSwordwoman />Action/Adventure</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 16 }})}}\n                        ><BsPencil /> Animation</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 35 }})}}\n                         ><FaLaughSquint /> Comedy</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 80 }})}}\n                        ><GiHandcuffs /> Crime</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 99 }})}}\n                         ><BiCameraMovie /> Documentary</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 18 }})}}\n                         ><FaSadCry /> Drama</button>\n                    </Col>\n                    {/* <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10751 }})}}\n                         ><GiFamilyHouse /> Family</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10762 }})}}\n                         ><FaChild /> Kids</button>\n                    </Col> */}\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 9648 }})}}\n                         ><GiMagnifyingGlass /> Mystery</button>\n                    </Col>\n                    {/* <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10763 }})}}\n                         ><GiNewspaper /> News</button>\n                    </Col> */}\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10764 }})}}\n                         ><BsFillPeopleFill /> Reality</button>\n                    </Col>\n                    {/* <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10765 }})}}\n                         ><GiLightSabers /> Sci-Fi & Fantasy</button>\n                    </Col> */}\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10766 }})}}\n                         ><GiSoap /> Soap</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10767 }})}}\n                         ><RiKakaoTalkLine /> Talk</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10768 }})}}\n                         ><GoLaw /> War & Politics</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 37 }})}}\n                         ><FaHatCowboy /> Western</button>\n                    </Col>\n                </Row>\n                <Row>\n                    {searchedMedia.map((shows) => {\n                        return (\n                            <Col sm={3}>\n                                <Card key={shows.tvShowId} style={{ width: '18rem' }}>\n                                    <Card.Img src={shows.tvShowPoster} alt={`The poster for ${shows.tvShowName}`} variant=\"top\" />\n                                    <Card.Body className=\"card-body\">\n                                        <Card.Title>{shows.tvShowName}</Card.Title>\n                                        <Card.Text>{shows.tvShowDetails}</Card.Text>\n                                        <Card.Text>Rating: {shows.tvShowRating}</Card.Text>\n                                        {Auth.loggedIn() && (\n                                            <Button variant=\"primary\" onClick={() => {handleSaveMedia(shows.tvShowId); }}>Save to your favorites!</Button>\n                                        )}\n                                        <Button variant=\"primary\" onClick={() => {setShowTvTrailerModal(true)\n                                         setTvTrailerModalTitle(shows.tvShowName + \" Show Trailer\"); }}\n                                        >Watch a trailer!</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>   \n                        )   \n                    })}  \n                </Row>\n            </Container>\n            <TvModal\n                showTvTrailerModal={showTvTrailerModal}\n                setShowTvTrailerModal={setShowTvTrailerModal}\n                tvTrailerModalTitle={tvTrailerModalTitle}\n                setTvTrailerModalTitle={setTvTrailerModalTitle}\n            ></TvModal>    \n        </div>\n    );\n};\n\nexport default SearchShows;\n\n// icons for later\n// GiNewspaper, GiLightSabers, GiFamilyHouse, FaChild,","import React from 'react';\nimport { Redirect } from 'react-router';\nimport auth from '../utils/auth';\nimport SearchShows from '../components/TV'\nimport { GiTvRemote } from \"react-icons/gi\";\n\n\n\nconst Tv = () => {\n  if (!auth.loggedIn()) {\n    return <Redirect to =\"/\" />\n  }\n  \n  return (\n    <main>\n      <div>\n        <div className=\"flex-row mb-3\">\n          <h2 className=\"bg-dark text-secondary p-3 display-inline-block text-center\">\n            <GiTvRemote /> Select a TV genre: \n          </h2>\n          <SearchShows />\n        </div>\n      </div>\n    </main> \n)\n};\n\nexport default Tv;\n","import React from 'react';\nimport { Redirect } from 'react-router';\nimport { useQuery } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { Col } from 'react-bootstrap';\nimport { QUERY_POSTS } from '../../utils/queries';\nimport auth from '../../utils/auth';\n\nconst FeedList = () => {\n    \n    const { loading, data: postData } = useQuery(QUERY_POSTS);\n\n    if (!auth.loggedIn()) {\n        return <Redirect to =\"/\" />\n    }\n    \n    if (loading) {\n        return <h1>Loading data...</h1>\n    }\n\n    return (\n        <Col className=\"post-outer\">\n            {auth.loggedIn() && (\n                postData.posts.map(post => (\n                    <div key={post.id} className=\"post-box\">\n                        <p><Link className=\"name-link\"\n                                to={`/profile/${post.username}`}\n                                style={{ fontWeight: 700 }}\n                            >\n                                {post.username}    \n                            </Link>{' '}\n\n                            {post.postText + '  '} posted on {post.createdAt} \n                        </p>\n                    </div>    \n                ))\n            )}        \n        </Col> \n    );\n};\n\nexport default FeedList;","import React from 'react';\nimport { Redirect } from 'react-router';\nimport FeedList from '../components/FeedPage';\nimport { Container, Row } from 'react-bootstrap';\nimport auth from '../utils/auth';\n\nconst HomePage = () => {\n    if (!auth.loggedIn()) {\n        return <Redirect to =\"/\" />\n    }\n\n    return (\n        <main>\n            <h1 className=\"feed-header\">Friend Feed:</h1>\n            <br />\n            <p>See what other users have saved recently and check out their profile!</p>\n            <Container>\n                <Row>\n                <FeedList />\n                </Row>\n            </Container>\n        </main>\n    );\n};\n\nexport default HomePage;","import React from 'react';\n\nconst NoPage = () => {\n    return (\n        <div>\n            Uh oh! That page doesn't exist!\n        </div>\n    );\n};\n\nexport default NoPage;","import React from \"react\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Login from \"./pages/Login\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport Profile from \"./pages/Profile\";\nimport Game from \"./pages/Game\";\nimport Movie from \"./pages/Movie\";\nimport Tv from \"./pages/Tv\";\nimport Home from \"./pages/Home\";\nimport NoPage from \"./pages/NoPage\";\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"user_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div fluid>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/home\" component={Home} />\n            <Route exact path=\"/profile/:username?\" component={Profile} />\n            <Route exact path=\"/tv\" component={Tv} />\n            <Route exact path=\"/movie\" component={Movie} />\n            <Route exact path=\"/game\" component={Game} />\n            <Route component={NoPage} />\n          </Switch>\n        </div>\n        <Footer />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}
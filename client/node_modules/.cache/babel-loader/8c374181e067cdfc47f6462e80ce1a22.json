{"ast":null,"code":"import decode from \"jwt-decode\";\n\nclass AuthData {\n  // Grab data saved in token\n  getUserData() {\n    // Checks to see if there is a saved token and if it is valid\n    const token = this.retrieveToken(); // Using type coersion to check if token is not undefined and is not expired\n\n    return decode(this.retrieveToken());\n  } // check if user's logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.retrieveToken();\n    return !!token && !this.isTokenExpired(token);\n  } // check if token is expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decodedToken = decode(token);\n\n      if (decodedToken.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  } // get token from local storage\n\n\n  retrieveToken() {\n    return localStorage.getItem(\"user_token\");\n  } // Set token to localStorage\n\n\n  login(userToken) {\n    localStorage.setItem(\"user_token\", userToken);\n    window.location.assign(\"/\");\n  } // Clears token and logouts\n\n\n  logout() {\n    localStorage.removeItem(\"user_token\");\n    window.location.assign(\"/\");\n  }\n\n}\n\nexport default new AuthData();","map":{"version":3,"sources":["G:/projects/entertain-me-redux/client/src/utils/auth.js"],"names":["decode","AuthData","getUserData","token","retrieveToken","loggedIn","isTokenExpired","decodedToken","exp","Date","now","err","localStorage","getItem","login","userToken","setItem","window","location","assign","logout","removeItem"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,YAAnB;;AAEA,MAAMC,QAAN,CAAe;AACb;AACAC,EAAAA,WAAW,GAAG;AACZ;AACA,UAAMC,KAAK,GAAG,KAAKC,aAAL,EAAd,CAFY,CAIZ;;AACA,WAAOJ,MAAM,CAAC,KAAKI,aAAL,EAAD,CAAb;AACD,GARY,CAUb;;;AACAC,EAAAA,QAAQ,GAAG;AACT;AACA,UAAMF,KAAK,GAAG,KAAKC,aAAL,EAAd;AACA,WAAO,CAAC,CAACD,KAAF,IAAW,CAAC,KAAKG,cAAL,CAAoBH,KAApB,CAAnB;AACD,GAfY,CAiBb;;;AACAG,EAAAA,cAAc,CAACH,KAAD,EAAQ;AACpB,QAAI;AACF,YAAMI,YAAY,GAAGP,MAAM,CAACG,KAAD,CAA3B;;AACA,UAAII,YAAY,CAACC,GAAb,GAAmBC,IAAI,CAACC,GAAL,KAAa,IAApC,EAA0C;AACxC,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF,GA7BY,CA+Bb;;;AACAP,EAAAA,aAAa,GAAG;AACd,WAAOQ,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAP;AACD,GAlCY,CAoCb;;;AACAC,EAAAA,KAAK,CAACC,SAAD,EAAY;AACfH,IAAAA,YAAY,CAACI,OAAb,CAAqB,YAArB,EAAmCD,SAAnC;AACAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD,GAxCY,CA0Cb;;;AACAC,EAAAA,MAAM,GAAG;AACPR,IAAAA,YAAY,CAACS,UAAb,CAAwB,YAAxB;AACAJ,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;AA9CY;;AAiDf,eAAe,IAAIlB,QAAJ,EAAf","sourcesContent":["import decode from \"jwt-decode\";\n\nclass AuthData {\n  // Grab data saved in token\n  getUserData() {\n    // Checks to see if there is a saved token and if it is valid\n    const token = this.retrieveToken();\n\n    // Using type coersion to check if token is not undefined and is not expired\n    return decode(this.retrieveToken());\n  }\n\n  // check if user's logged in\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.retrieveToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  // check if token is expired\n  isTokenExpired(token) {\n    try {\n      const decodedToken = decode(token);\n      if (decodedToken.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // get token from local storage\n  retrieveToken() {\n    return localStorage.getItem(\"user_token\");\n  }\n\n  // Set token to localStorage\n  login(userToken) {\n    localStorage.setItem(\"user_token\", userToken);\n    window.location.assign(\"/\");\n  }\n\n  // Clears token and logouts\n  logout() {\n    localStorage.removeItem(\"user_token\");\n    window.location.assign(\"/\");\n  }\n}\n\nexport default new AuthData();\n"]},"metadata":{},"sourceType":"module"}
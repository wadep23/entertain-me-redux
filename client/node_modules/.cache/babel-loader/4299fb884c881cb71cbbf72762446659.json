{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\entertain-me-redux\\\\client\\\\src\\\\components\\\\Game\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, Row, Container, Col } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SAVE_GAME, ADD_POST } from '../../utils/mutations';\nimport { GAME_API_QUERY } from '../../utils/queries';\nimport GameModal from '../GameModal';\nimport Auth from '../../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchGames = props => {\n  _s();\n\n  const {\n    platformInt,\n    genreString\n  } = props;\n  const [showGameTrailerModal, setShowGameTrailerModal] = useState(false);\n  const [gameTrailerModalTitle, setGameTrailerModalTitle] = useState('');\n  const [searchedMedia, setSearchedMedia] = useState([]);\n  const [savedMedia, setSavedMedia] = useState({});\n  const {\n    loading,\n    data\n  } = useQuery(GAME_API_QUERY, {\n    variables: {\n      genre: genreString,\n      platform: platformInt\n    }\n  });\n  const [saveGame] = useMutation(SAVE_GAME);\n  const [createPost] = useMutation(ADD_POST);\n  useEffect(() => {\n    if (data) {\n      let gameData = data.game.map(game => ({\n        gameId: game.id,\n        gameName: game.name,\n        gameRating: game.rating,\n        gamePoster: game.background_image\n      }));\n      setSearchedMedia(gameData);\n    }\n  }, [data]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  }\n\n  const handleSaveMedia = async gameId => {\n    const gameToSave = searchedMedia.find(media => media.gameId === gameId);\n\n    try {\n      await saveGame({\n        variables: {\n          gameId: gameToSave.gameId,\n          gameName: gameToSave.gameName,\n          gamePoster: gameToSave.gamePoster,\n          gameRating: gameToSave.gameRating\n        }\n      });\n      await createPost({\n        variables: {\n          postText: ` saved ${gameToSave.gameName} to their favorite games!`\n        }\n      });\n      setSavedMedia([...savedMedia, gameToSave.gameId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"return-data\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        children: searchedMedia.map(games => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            sm: 3,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                width: '18rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                src: games.gamePoster,\n                alt: `The poster for ${games.gameName}`,\n                variant: \"top\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                  children: games.gameName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 76,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                  children: [\"Rating: \", games.gameRating]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 41\n                }, this), Auth.loggedIn() && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  onClick: () => {\n                    handleSaveMedia(games.gameId);\n                  },\n                  children: \"Save to your favorites!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  onClick: () => {\n                    setShowGameTrailerModal(true);\n                    setGameTrailerModalTitle(games.gameName + \" game Trailer\");\n                  },\n                  children: \"Watch a trailer!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 37\n              }, this)]\n            }, games.gameId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameModal, {\n      showGameTrailerModal: showGameTrailerModal,\n      setShowGameTrailerModal: setShowGameTrailerModal,\n      gameTrailerModalTitle: gameTrailerModalTitle,\n      setGameTrailerModalTitle: setGameTrailerModalTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchGames, \"tHL+8a3EDsWwSf9LGA6M+wedKuc=\", false, function () {\n  return [useQuery, useMutation, useMutation];\n});\n\n_c = SearchGames;\nexport default SearchGames;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchGames\");","map":{"version":3,"sources":["G:/projects/entertain-me-redux/client/src/components/Game/index.js"],"names":["React","useState","useEffect","Button","Card","Row","Container","Col","useMutation","useQuery","SAVE_GAME","ADD_POST","GAME_API_QUERY","GameModal","Auth","SearchGames","props","platformInt","genreString","showGameTrailerModal","setShowGameTrailerModal","gameTrailerModalTitle","setGameTrailerModalTitle","searchedMedia","setSearchedMedia","savedMedia","setSavedMedia","loading","data","variables","genre","platform","saveGame","createPost","gameData","game","map","gameId","id","gameName","name","gameRating","rating","gamePoster","background_image","handleSaveMedia","gameToSave","find","media","postText","err","console","error","games","width","loggedIn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button, Card, Row, Container, Col } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { SAVE_GAME, ADD_POST } from '../../utils/mutations';\nimport { GAME_API_QUERY }from '../../utils/queries';\nimport GameModal from '../GameModal';\nimport Auth from '../../utils/auth';\n\nconst SearchGames = (props) => {\n    const { platformInt, genreString } = props;\n    const [showGameTrailerModal, setShowGameTrailerModal] = useState(false);\n    const [gameTrailerModalTitle, setGameTrailerModalTitle] = useState('');\n    const [searchedMedia, setSearchedMedia] = useState([]);\n    const [savedMedia, setSavedMedia] = useState({});\n\n    const { loading, data } = useQuery(GAME_API_QUERY, {\n        variables: { genre: genreString, platform: platformInt}\n    });\n    \n    const [saveGame] = useMutation(SAVE_GAME);\n    const [createPost] = useMutation(ADD_POST);\n\n    \n    useEffect(() => {\n        if (data) {\n            let gameData = data.game.map((game) => ({\n                gameId: game.id,\n                gameName: game.name,\n                gameRating: game.rating,\n                gamePoster: game.background_image\n            }));\n            setSearchedMedia(gameData) \n        }\n    }, [data]);\n\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n    const handleSaveMedia = async (gameId) => {\n        const gameToSave = searchedMedia.find((media) => media.gameId === gameId);\n        \n        \n        try {\n            await saveGame({\n                variables: {\n                    gameId: gameToSave.gameId,\n                    gameName: gameToSave.gameName,\n                    gamePoster: gameToSave.gamePoster,\n                    gameRating: gameToSave.gameRating\n                }\n            })\n\n            await createPost({\n                variables: {\n                  postText: ` saved ${gameToSave.gameName} to their favorite games!`  \n                }\n            })\n\n            setSavedMedia([...savedMedia, gameToSave.gameId])\n            } catch (err) {\n                console.error(err);\n            }\n    };\n\n    return (\n        <div class=\"return-data\">\n            <Container>\n                <Row>\n                    {searchedMedia.map((games) => {\n                        return (\n                            <Col sm={3}>\n                                <Card key={games.gameId} style={{ width: '18rem' }}>\n                                    <Card.Img src={games.gamePoster} alt={`The poster for ${games.gameName}`} variant=\"top\" />\n                                    <Card.Body className=\"card-body\">\n                                        <Card.Title>{games.gameName}</Card.Title>\n                                        <Card.Text>Rating: {games.gameRating}</Card.Text>\n                                        {Auth.loggedIn() && (\n                                            <Button variant=\"primary\" onClick={() => {handleSaveMedia(games.gameId); }}>Save to your favorites!</Button>\n                                        )}\n                                        <Button variant=\"primary\" onClick={() => {setShowGameTrailerModal(true)\n                                         setGameTrailerModalTitle(games.gameName + \" game Trailer\"); }}\n                                        >Watch a trailer!</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>   \n                        )   \n                    })}  \n                </Row>\n            </Container>\n            <GameModal\n                showGameTrailerModal={showGameTrailerModal}\n                setShowGameTrailerModal={setShowGameTrailerModal}\n                gameTrailerModalTitle={gameTrailerModalTitle}\n                setGameTrailerModalTitle={setGameTrailerModalTitle}\n            ></GameModal>    \n        </div>\n    );\n};\n\nexport default SearchGames;"]},"metadata":{},"sourceType":"module"}
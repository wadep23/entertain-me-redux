{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\entertain-me-redux\\\\client\\\\src\\\\components\\\\Movie\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Button, Card, Row, Container, Col } from 'react-bootstrap';\nimport { useMutation, useLazyQuery, useQuery } from '@apollo/client';\nimport { SAVE_MOVIE, ADD_POST } from '../../utils/mutations';\nimport { MOVIE_API_QUERY, QUERY_SELF } from '../../utils/queries';\nimport TrailerModal from '../TrailerModal';\nimport Auth from '../../utils/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchMedia = () => {\n  _s();\n\n  let imgLink = \"https://image.tmdb.org/t/p/w500\";\n  const [showTrailerModal, setShowTrailerModal] = useState(false);\n  const [trailerModalTitle, setTrailerModalTitle] = useState('');\n  const [searchedMedia, setSearchedMedia] = useState([]);\n  const [savedMedia, setSavedMedia] = useState({}); // const { username: userParam } = useParams();\n  // const { userLoading, userData } = useQuery(QUERY_SELF, {\n  //     variables: { username: userParam }\n  // });\n\n  const [getGenre, {\n    loading,\n    data\n  }] = useLazyQuery(MOVIE_API_QUERY);\n  const [saveMovie] = useMutation(SAVE_MOVIE); // const [createPost] = useMutation(ADD_POST);\n\n  useEffect(() => {\n    if (data) {\n      let movieData = data.movie.map(movies => ({\n        movieId: movies.id,\n        movieName: movies.original_title,\n        moviePoster: imgLink + movies.poster_path,\n        movieDetails: movies.overview,\n        movieRating: movies.vote_average\n      }));\n      setSearchedMedia(movieData);\n    }\n  }, [data, imgLink]); // console.log(userData)\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  }\n\n  const handleSaveMedia = async movieId => {\n    const movieToSave = searchedMedia.find(media => media.movieId === movieId);\n\n    try {\n      await saveMovie({\n        variables: {\n          movieId: movieToSave.movieId,\n          movieName: movieToSave.movieName,\n          moviePoster: movieToSave.moviePoster,\n          movieDetails: movieToSave.movieDetails,\n          movieRating: movieToSave.movieRating\n        }\n      }); // await createPost({\n      //     variables: {\n      //       postText: `${userData.user}`  \n      //     }\n      // })\n\n      setSavedMedia([...savedMedia, movieToSave.movieId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"return-data\",\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 27\n                }\n              });\n            },\n            children: \"Horror\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 28\n                }\n              });\n            },\n            children: \"Action\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 12\n                }\n              });\n            },\n            children: \"Adventure\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 10749\n                }\n              });\n            },\n            children: \"Romance\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 878\n                }\n              });\n            },\n            children: \"Sci-Fi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 18\n                }\n              });\n            },\n            children: \"Drama\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 14\n                }\n              });\n            },\n            children: \"Fantasy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 9648\n                }\n              });\n            },\n            children: \"Mystery\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              getGenre({\n                variables: {\n                  genre: 35\n                }\n              });\n            },\n            children: \"Comedy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: searchedMedia.map(movies => {\n          return /*#__PURE__*/_jsxDEV(Col, {\n            sm: 3,\n            children: /*#__PURE__*/_jsxDEV(Card, {\n              style: {\n                width: '18rem'\n              },\n              children: [/*#__PURE__*/_jsxDEV(Card.Img, {\n                src: movies.moviePoster,\n                alt: `The poster for ${movies.movieName}`,\n                variant: \"top\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n                className: \"card-body\",\n                children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                  children: movies.movieName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                  children: movies.movieDetails\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                  children: [\"Rating: \", movies.movieRating]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 41\n                }, this), Auth.loggedIn() && /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  onClick: () => {\n                    handleSaveMedia(movies.movieId);\n                  },\n                  children: \"Save to your favorites!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"primary\",\n                  onClick: () => {\n                    setShowTrailerModal(true);\n                    setTrailerModalTitle(movies.movieName + \" Movie Trailer\");\n                  },\n                  children: \"Watch a trailer!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 37\n              }, this)]\n            }, movies.movieId, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TrailerModal, {\n      showTrailerModal: showTrailerModal,\n      setShowTrailerModal: setShowTrailerModal,\n      trailerModalTitle: trailerModalTitle,\n      setTrailerModalTitle: setTrailerModalTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SearchMedia, \"ImvudVSQjV1niafMQireLvuwxgs=\", false, function () {\n  return [useLazyQuery, useMutation];\n});\n\n_c = SearchMedia;\nexport default SearchMedia;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchMedia\");","map":{"version":3,"sources":["G:/projects/entertain-me-redux/client/src/components/Movie/index.js"],"names":["React","useState","useEffect","useParams","Button","Card","Row","Container","Col","useMutation","useLazyQuery","useQuery","SAVE_MOVIE","ADD_POST","MOVIE_API_QUERY","QUERY_SELF","TrailerModal","Auth","SearchMedia","imgLink","showTrailerModal","setShowTrailerModal","trailerModalTitle","setTrailerModalTitle","searchedMedia","setSearchedMedia","savedMedia","setSavedMedia","getGenre","loading","data","saveMovie","movieData","movie","map","movies","movieId","id","movieName","original_title","moviePoster","poster_path","movieDetails","overview","movieRating","vote_average","handleSaveMedia","movieToSave","find","media","variables","err","console","error","genre","width","loggedIn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {Button, Card, Row, Container, Col} from 'react-bootstrap';\nimport { useMutation, useLazyQuery, useQuery } from '@apollo/client';\nimport { SAVE_MOVIE, ADD_POST } from '../../utils/mutations';\nimport { MOVIE_API_QUERY, QUERY_SELF }from '../../utils/queries';\nimport TrailerModal from '../TrailerModal';\nimport Auth from '../../utils/auth';\n\nconst SearchMedia = () => {\n    let imgLink = \"https://image.tmdb.org/t/p/w500\";\n    const [showTrailerModal, setShowTrailerModal] = useState(false);\n    const [trailerModalTitle, setTrailerModalTitle] = useState('');\n    const [searchedMedia, setSearchedMedia] = useState([]);\n    const [savedMedia, setSavedMedia] = useState({});\n    // const { username: userParam } = useParams();\n\n    // const { userLoading, userData } = useQuery(QUERY_SELF, {\n    //     variables: { username: userParam }\n    // });\n\n    const [getGenre, { loading, data }] = useLazyQuery(MOVIE_API_QUERY);\n    \n    const [saveMovie] = useMutation(SAVE_MOVIE);\n    // const [createPost] = useMutation(ADD_POST);\n\n    useEffect(() => {\n        if (data) {\n            let movieData = data.movie.map((movies) => ({\n                movieId: movies.id,\n                movieName: movies.original_title,\n                moviePoster: imgLink + movies.poster_path,\n                movieDetails: movies.overview,\n                movieRating: movies.vote_average\n            }));\n            setSearchedMedia(movieData) \n        }\n    }, [data, imgLink]);\n    // console.log(userData)\n    if (loading) {\n        return <div>Loading...</div>\n    }\n\n    const handleSaveMedia = async (movieId) => {\n        const movieToSave = searchedMedia.find((media) => media.movieId === movieId);\n        \n        try {\n            await saveMovie({\n                variables: {\n                    movieId: movieToSave.movieId,\n                    movieName: movieToSave.movieName,\n                    moviePoster: movieToSave.moviePoster,\n                    movieDetails: movieToSave.movieDetails,\n                    movieRating: movieToSave.movieRating\n                }\n            })\n\n            // await createPost({\n            //     variables: {\n            //       postText: `${userData.user}`  \n            //     }\n            // })\n\n            setSavedMedia([...savedMedia, movieToSave.movieId])\n            } catch (err) {\n                console.error(err);\n            }\n    };\n\n    return (\n        <div class=\"return-data\">\n            <Container>\n                <Row>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 27 }})}}\n                        >Horror</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 28 }})}} \n                        >Action</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 12 }})}}\n                        >Adventure</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 10749 }})}}\n                         >Romance</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 878 }})}}\n                         >Sci-Fi</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 18 }})}}\n                         >Drama</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 14 }})}}\n                         >Fantasy</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 9648 }})}}\n                         >Mystery</button>\n                    </Col>\n                    <Col>\n                        <button onClick={() => { getGenre({ variables: { genre: 35 }})}}\n                         >Comedy</button>\n                    </Col>\n                </Row>\n                <Row>\n                    {searchedMedia.map((movies) => {\n                        return (\n                            <Col sm={3}>\n                                <Card key={movies.movieId} style={{ width: '18rem' }}>\n                                    <Card.Img src={movies.moviePoster} alt={`The poster for ${movies.movieName}`} variant=\"top\" />\n                                    <Card.Body className=\"card-body\">\n                                        <Card.Title>{movies.movieName}</Card.Title>\n                                        <Card.Text>{movies.movieDetails}</Card.Text>\n                                        <Card.Text>Rating: {movies.movieRating}</Card.Text>\n                                        {Auth.loggedIn() && (\n                                            <Button variant=\"primary\" onClick={() => {handleSaveMedia(movies.movieId); }}>Save to your favorites!</Button>\n                                        )}\n                                        <Button variant=\"primary\" onClick={() => {setShowTrailerModal(true)\n                                         setTrailerModalTitle(movies.movieName + \" Movie Trailer\"); }}\n                                        >Watch a trailer!</Button>\n                                    </Card.Body>\n                                </Card>\n                            </Col>   \n                        )   \n                    })}  \n                </Row>\n            </Container>\n            <TrailerModal\n                showTrailerModal={showTrailerModal}\n                setShowTrailerModal={setShowTrailerModal}\n                trailerModalTitle={trailerModalTitle}\n                setTrailerModalTitle={setTrailerModalTitle}\n            ></TrailerModal>    \n        </div>\n    );\n};\n\nexport default SearchMedia;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"G:\\\\projects\\\\entertain-me-redux\\\\client\\\\src\\\\pages\\\\Profile.js\",\n    _s = $RefreshSig$();\n\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { ADD_FRIEND, REMOVE_MOVIE, REMOVE_TV_SHOW, REMOVE_GAME } from \"../utils/mutations\";\nimport { QUERY_SELF, QUERY_USER } from \"../utils/queries\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Container, CardColumns, Card, Button } from \"react-bootstrap\";\nimport { removeMediaId } from \"../utils/saveMedia\";\nimport Auth from \"../utils/auth\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Profile = () => {\n  _s();\n\n  const {\n    username: userParam\n  } = useParams();\n  const [addFriend] = useMutation(ADD_FRIEND);\n  const [deleteContent] = useMutation(REMOVE_MOVIE, REMOVE_TV_SHOW, REMOVE_GAME);\n  const {\n    loading,\n    data\n  } = useQuery(userParam ? QUERY_SELF : QUERY_USER, {\n    variables: {\n      username: userParam\n    }\n  });\n  console.log(data);\n  const userData = (data === null || data === void 0 ? void 0 : data.me) || (data === null || data === void 0 ? void 0 : data.user) || {};\n\n  if (Auth.loggedIn() && Auth.getUserData().username === userParam) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/profile\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (!(userData === null || userData === void 0 ? void 0 : userData.username)) {\n    return /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"You need to be logged in to see this. Please select log in or sign up to view user profile page!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  } // change the passed in value to something that can be unique to the content type ie. passed in value of mediaType and compare to favorite media array on user model\n\n\n  const handleDeleteContent = async () => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null; // const { data } = useQuery(userParam ? QUERY_SELF : QUERY_USER, {\n    //   variables: { username: userParam },\n    // });\n\n    const movieId = (data === null || data === void 0 ? void 0 : data.me.favoriteMovies.movieId) || (data === null || data === void 0 ? void 0 : data.user.favoriteMovies.movieId);\n    const tvShowId = (data === null || data === void 0 ? void 0 : data.me.favoriteTvShows.tvShowId) || (data === null || data === void 0 ? void 0 : data.user.favoriteTvShows.tvShowId);\n    const gameId = (data === null || data === void 0 ? void 0 : data.me.favoriteGames.gameId) || (data === null || data === void 0 ? void 0 : data.user.favoriteGames.gameId);\n\n    if (!token) {\n      return false;\n    }\n\n    if (movieId) {\n      await deleteContent({\n        variables: {\n          movieId: movieId\n        },\n        update: cache => {\n          const data = cache.readQuery({\n            query: QUERY_SELF\n          });\n          const userDataCache = data.me;\n          const savedMovieCache = userDataCache.favoriteMovies;\n          const updatedMoviesCache = savedMovieCache.filter(movie => movie.movieId !== movieId);\n          data.me.favoriteMovies = updatedMoviesCache;\n          cache.writeQuery({\n            query: QUERY_SELF,\n            data: {\n              data: { ...data.me.favoriteMovies\n              }\n            }\n          });\n        }\n      });\n      removeMediaId(movieId);\n    }\n\n    if (tvShowId) {\n      await deleteContent({\n        variables: {\n          tvShowId: tvShowId\n        },\n        update: cache => {\n          const data = cache.readQuery({\n            query: QUERY_SELF\n          });\n          const userDataCache = data.me;\n          const savedTvShowCache = userDataCache.favoriteTvShows;\n          const updatedTvShowCache = savedTvShowCache.filter(tv => tv.tvShowId !== tvShowId);\n          data.me.favoriteTvShows = updatedTvShowCache;\n          cache.writeQuery({\n            query: QUERY_SELF,\n            data: {\n              data: { ...data.me.favoriteTvShows\n              }\n            }\n          });\n        }\n      });\n      removeMediaId(tvShowId);\n    }\n\n    if (gameId) {\n      await deleteContent({\n        variables: {\n          gameId: gameId\n        },\n        update: cache => {\n          const data = cache.readQuery({\n            query: QUERY_SELF\n          });\n          const userDataCache = data.me;\n          const savedGameCache = userDataCache.favoriteGames;\n          const updatedGamesCache = savedGameCache.filter(game => game.gameId !== gameId);\n          data.me.favoriteGames = updatedGamesCache;\n          cache.writeQuery({\n            query: QUERY_SELF,\n            data: {\n              data: { ...data.me.favoriteGames\n              }\n            }\n          });\n        }\n      });\n      removeMediaId(gameId);\n    }\n  };\n\n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: {\n          id: userData._id\n        }\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      fluid: true,\n      className: \"text-light bg-dark\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [`${userData.username}'s`, \" Profile\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), userParam && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: handleClick,\n          children: \"Add Friend\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userData.favoriteMovies.length ? `Viewing ${userData.favoriteMovies.length} saved ${userData.favoriteMovies.length === 1 ? \"movie\" : \"movies\"}:` : \"You have no saved movies!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: userData.favoriteMovies.map(user => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [user.moviePoster ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: user.moviePoster,\n              alt: `The cover for ${user.movieName}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: user.movieName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: user.movieDetails\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-block btn-danger\",\n                onClick: () => handleDeleteContent(user.movieId),\n                children: \"Delete this Movie!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 17\n            }, this)]\n          }, user.movieId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userData.favoriteTvShows.length ? `Viewing ${userData.favoriteTvShows.length} saved ${userData.favoriteTvShows.length === 1 ? \"tv show\" : \"tv shows\"}:` : \"You have no saved Tv Shows!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: userData.favoriteTvShows.map(user => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [user.tvShowPoster ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: user.tvShowPoster,\n              alt: `The cover for ${user.tvShowName}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: user.tvShowName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: user.tvShowDetails\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-block btn-danger\",\n                onClick: () => handleDeleteContent(user.tvShowId),\n                children: \"Delete this Tv Show!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 17\n            }, this)]\n          }, user.tvShowId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: userData.favoriteGames.length ? `Viewing ${userData.favoriteGames.length} saved ${userData.favoriteGames.length === 1 ? \"game\" : \"games\"}:` : \"You have no saved Games!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardColumns, {\n        children: userData.favoriteGames.map(user => {\n          return /*#__PURE__*/_jsxDEV(Card, {\n            border: \"dark\",\n            children: [user.gamePoster ? /*#__PURE__*/_jsxDEV(Card.Img, {\n              src: user.gamePoster,\n              alt: `The cover for ${user.gameName}`,\n              variant: \"top\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 19\n            }, this) : null, /*#__PURE__*/_jsxDEV(Card.Body, {\n              children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n                children: user.gameName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n                children: user.gameDetails\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                className: \"btn-block btn-danger\",\n                onClick: () => handleDeleteContent(user.gameId),\n                children: \"Delete this Game!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)]\n          }, user.gameId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Profile, \"J4+5xbBlqaWmpmNzKZYf1Yj1izs=\", false, function () {\n  return [useParams, useMutation, useMutation, useQuery];\n});\n\n_c = Profile;\nexport default Profile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"sources":["G:/projects/entertain-me-redux/client/src/pages/Profile.js"],"names":["Redirect","useParams","ADD_FRIEND","REMOVE_MOVIE","REMOVE_TV_SHOW","REMOVE_GAME","QUERY_SELF","QUERY_USER","useQuery","useMutation","Container","CardColumns","Card","Button","removeMediaId","Auth","Profile","username","userParam","addFriend","deleteContent","loading","data","variables","console","log","userData","me","user","loggedIn","getUserData","handleDeleteContent","token","getToken","movieId","favoriteMovies","tvShowId","favoriteTvShows","gameId","favoriteGames","update","cache","readQuery","query","userDataCache","savedMovieCache","updatedMoviesCache","filter","movie","writeQuery","savedTvShowCache","updatedTvShowCache","tv","savedGameCache","updatedGamesCache","game","handleClick","id","_id","err","error","length","map","moviePoster","movieName","movieDetails","tvShowPoster","tvShowName","tvShowDetails","gamePoster","gameName","gameDetails"],"mappings":"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","sourcesContent":["import { Redirect, useParams } from \"react-router-dom\";\nimport {\n  ADD_FRIEND,\n  REMOVE_MOVIE,\n  REMOVE_TV_SHOW,\n  REMOVE_GAME,\n} from \"../utils/mutations\";\nimport { QUERY_SELF, QUERY_USER } from \"../utils/queries\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { Container, CardColumns, Card, Button } from \"react-bootstrap\";\nimport { removeMediaId } from \"../utils/saveMedia\";\nimport Auth from \"../utils/auth\";\n\nconst Profile = () => {\n  const { username: userParam } = useParams();\n\n  const [addFriend] = useMutation(ADD_FRIEND);\n  const [deleteContent] = useMutation(\n    REMOVE_MOVIE,\n    REMOVE_TV_SHOW,\n    REMOVE_GAME\n  );\n  const { loading, data } = useQuery(userParam ? QUERY_SELF : QUERY_USER, {\n    variables: { username: userParam },\n  });\n  console.log(data);\n\n  const userData = data?.me || data?.user || {};\n\n  if (Auth.loggedIn() && Auth.getUserData().username === userParam) {\n    return <Redirect to=\"/profile\" />;\n  }\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  if (!userData?.username) {\n    return (\n      <h4>\n        You need to be logged in to see this. Please select log in or sign up to\n        view user profile page!\n      </h4>\n    );\n  }\n  // change the passed in value to something that can be unique to the content type ie. passed in value of mediaType and compare to favorite media array on user model\n  const handleDeleteContent = async () => {\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n    // const { data } = useQuery(userParam ? QUERY_SELF : QUERY_USER, {\n    //   variables: { username: userParam },\n    // });\n\n    const movieId =\n      data?.me.favoriteMovies.movieId || data?.user.favoriteMovies.movieId;\n    const tvShowId =\n      data?.me.favoriteTvShows.tvShowId || data?.user.favoriteTvShows.tvShowId;\n    const gameId =\n      data?.me.favoriteGames.gameId || data?.user.favoriteGames.gameId;\n\n    if (!token) {\n      return false;\n    }\n\n    if (movieId) {\n      await deleteContent({\n        variables: { movieId: movieId },\n        update: (cache) => {\n          const data = cache.readQuery({ query: QUERY_SELF });\n          const userDataCache = data.me;\n          const savedMovieCache = userDataCache.favoriteMovies;\n          const updatedMoviesCache = savedMovieCache.filter(\n            (movie) => movie.movieId !== movieId\n          );\n          data.me.favoriteMovies = updatedMoviesCache;\n          cache.writeQuery({\n            query: QUERY_SELF,\n            data: { data: { ...data.me.favoriteMovies } },\n          });\n        },\n      });\n      removeMediaId(movieId);\n    }\n    if (tvShowId) {\n      await deleteContent({\n        variables: { tvShowId: tvShowId },\n        update: (cache) => {\n          const data = cache.readQuery({ query: QUERY_SELF });\n          const userDataCache = data.me;\n          const savedTvShowCache = userDataCache.favoriteTvShows;\n          const updatedTvShowCache = savedTvShowCache.filter(\n            (tv) => tv.tvShowId !== tvShowId\n          );\n          data.me.favoriteTvShows = updatedTvShowCache;\n          cache.writeQuery({\n            query: QUERY_SELF,\n            data: { data: { ...data.me.favoriteTvShows } },\n          });\n        },\n      });\n      removeMediaId(tvShowId);\n    }\n    if (gameId) {\n      await deleteContent({\n        variables: { gameId: gameId },\n        update: (cache) => {\n          const data = cache.readQuery({ query: QUERY_SELF });\n          const userDataCache = data.me;\n          const savedGameCache = userDataCache.favoriteGames;\n          const updatedGamesCache = savedGameCache.filter(\n            (game) => game.gameId !== gameId\n          );\n          data.me.favoriteGames = updatedGamesCache;\n          cache.writeQuery({\n            query: QUERY_SELF,\n            data: { data: { ...data.me.favoriteGames } },\n          });\n        },\n      });\n      removeMediaId(gameId);\n    }\n  };\n\n  const handleClick = async () => {\n    try {\n      await addFriend({\n        variables: { id: userData._id },\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  return (\n    <>\n      <div fluid className=\"text-light bg-dark\">\n        <Container>\n          <h2>{`${userData.username}'s`} Profile</h2>\n          {userParam && (\n            <button className=\"btn\" onClick={handleClick}>\n              Add Friend\n            </button>\n          )}\n        </Container>\n      </div>\n      <Container>\n        <h2>\n          {userData.favoriteMovies.length\n            ? `Viewing ${userData.favoriteMovies.length} saved ${\n                userData.favoriteMovies.length === 1 ? \"movie\" : \"movies\"\n              }:`\n            : \"You have no saved movies!\"}\n        </h2>\n        <CardColumns>\n          {userData.favoriteMovies.map((user) => {\n            return (\n              <Card key={user.movieId} border=\"dark\">\n                {user.moviePoster ? (\n                  <Card.Img\n                    src={user.moviePoster}\n                    alt={`The cover for ${user.movieName}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{user.movieName}</Card.Title>\n                  <Card.Text>{user.movieDetails}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteContent(user.movieId)}\n                  >\n                    Delete this Movie!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n      <Container>\n        <h2>\n          {userData.favoriteTvShows.length\n            ? `Viewing ${userData.favoriteTvShows.length} saved ${\n                userData.favoriteTvShows.length === 1 ? \"tv show\" : \"tv shows\"\n              }:`\n            : \"You have no saved Tv Shows!\"}\n        </h2>\n        <CardColumns>\n          {userData.favoriteTvShows.map((user) => {\n            return (\n              <Card key={user.tvShowId} border=\"dark\">\n                {user.tvShowPoster ? (\n                  <Card.Img\n                    src={user.tvShowPoster}\n                    alt={`The cover for ${user.tvShowName}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{user.tvShowName}</Card.Title>\n                  <Card.Text>{user.tvShowDetails}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteContent(user.tvShowId)}\n                  >\n                    Delete this Tv Show!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n      <Container>\n        <h2>\n          {userData.favoriteGames.length\n            ? `Viewing ${userData.favoriteGames.length} saved ${\n                userData.favoriteGames.length === 1 ? \"game\" : \"games\"\n              }:`\n            : \"You have no saved Games!\"}\n        </h2>\n        <CardColumns>\n          {userData.favoriteGames.map((user) => {\n            return (\n              <Card key={user.gameId} border=\"dark\">\n                {user.gamePoster ? (\n                  <Card.Img\n                    src={user.gamePoster}\n                    alt={`The cover for ${user.gameName}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{user.gameName}</Card.Title>\n                  <Card.Text>{user.gameDetails}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteContent(user.gameId)}\n                  >\n                    Delete this Game!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default Profile;\n"]},"metadata":{},"sourceType":"module"}